Part 4 - Linux Administration

1) Nano. The first command line editor I used was vim, but the lack of an on-screen shortcut that other editors offered made it hard to keep using it.

2) a. pwd	- print name of the current/working directory
			- For scripting, you can use PWD to reference the current directory you are on
			- eg. To store a directory in a variable, we can do var_path=`pwd`. Then if we echo $var_path anywhere, it always returns the directory path we first stored into it.
		Options:
			- L --include symbolic link (like a shortened link to the actual directory)
			- P --prints the full actual directories instead
			
	b. ln	- creates a 'hard' or 'soft' link between files.
			- 'Soft' links acts as a pointer to another file and  lose reference to the file when the original file is deleted
			- 'Hard' links maintain the contents of the original file even when the original file is deleted	
			- If we want to create a symlink, we use "ln -s source_file dest_file", where dest_file is the symlink of the source file.
			- There are 4 forms this command can be used with:
				i)	ln [OPTION]... TARGET LINK_NAME		-- Creates the target link into link_name in the same directory
				ii)	ln [OPTION]... TARGET				-- Creates the link of the target into the current directory (target must be in a different directory)
				iii)ln [OPTION]... TARGET... DIRECTORY	-- Creates the link of the target into the directory with the same name
				iv)	ln [OPTION]... -t DIRECTORY TARGET 	-- Same as iii, but uses the -t option to specify the directory as the first argument and the target file second
		Options:
			-s By default, ln creates hard links. If we want to create a symlink, we use -s. (eg. Usage ln -s source dest)
			-t Specifies the target directory to create the link in (eg. Usage is ln -t user/TargetFolder source.txt --TargetFolder now contains a hard link named source.txt)
			-v Verbose. When this option is used, after the link is created, it prints where the linked file is linked to
			-f Force. Overwrites the destination file, if it exists.
			
	c. ant	- command used in Apache Ant, which is a Java build and deployment tool.
			- this command can be used to compile, assemble, test, and run Java applications.
			- for example, if we want to generate javadocs, we can execute "ant generate-javadoc"
			- if no arguments are specified, it looks for a build.xml and uses it as the build file.
			
		Options:
			-buildfile file		Uses a specific buildfile aside from the default directory
			-find [file]		Attempts to find a build file in the currents directory, then working upwards the parent directories
			-D<property>=value	this option allows to set properties in the command line. It overrides existing properties set in the build file
			-debug				print the most amount of information to the console
			-verbose			print additional information to the console
			-quiet				print less information to the console
			-silent				only print output and build failures
	
	d. sed	- A stream editor used for transforming text on the stream supplied from a file or pipeline
			- If we want to replace all instances of "Hello" to "Goodbye" in HelloWorld.txt, we could do "sed -i '/s/Hello/GoodBye/' HelloWorld.txt"
			- Of it we want to store a sed script and apply it to a text file we could do the following:
				echo s/HELLO/GOODBYE/ > change.sed
				sed -i -f change.sed HelloWorld.txt (if you want to make a backup of the file before applying script, change -i to -ibak)
		
		Options:
			-e	Runs the expression as the first argument onto the input file as the second argument
			-f	loads a sed script that contains an expression as the first argument then apply it to the input file as the second argument
			-i	Specifies that the files provided in the input are to be edited in-place.
				If we want to create a back up of Hello.txt, we specify an arbitrary suffix like -iBAK and a backup file called Hello.txtBAK will be created
				
	e. chmod- modifies the file mode bits of a specified file
			- this command has the form:
				chmod <options> <permissions> file_name
			- We can individually set permissions for the owner of the file(u), members of the owner's group(g), and others(o)
			- There are 3 types of permissions: read(r), write(w), and execute(x)
			- If we want to change a file Hello.java so that the owner has full access to it and everyone else can only read it, we would do:
				chmod u=rwx,go=r Hello.java
			- If we want to add a write permission to group, we simply do:
				chmod g+w Hello.java
			- We can also use a numerical representation of the permissions through a numbering system from 0 to 7:
				0 - No permission		3 - Write+Execute		6 - Read+Write
				1 - Execute				4 - Read				7 - Read+Write+Execute
				2 - Write				5 - Read+Execute
			- So if we want to change permissions in Hello.java so the owner has full access while everyone else can only read, we can set it numerically by:
				chmod 744 Hello.java
				
			Options:
				-R apply the changes to all files and subdirectories(if a directory is provided)
				-v outputs all the changes made on the console
				--reference=RFILE	change the permissions of the file based exactly on RFILE's permissions
				
	f. ps	- display a snapshot of the current processes
			
			
			
			